LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

  1:Name     BUSCTRL;
  2:PartNo   BUSCTRL;
  3:Date     03/30/2024;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508isptqfp100;
 10:
 11:PROPERTY ATMEL {TDI_PULLUP = ON};
 12:PROPERTY ATMEL {TMS_PULLUP = ON};
 13:PROPERTY ATMEL {PREASSIGN = KEEP};
 14:
 15:
 16:/* NOTE:  Active low values are designated with a starting n. */
 17:
 18:/* 
 19:                                                Inputs
 20:    ##########################################################################################
 21:*/
 22:Pin [0..0] = [CPU_FC0..2];
 23:Pin [0..0] = [CPU_A31..16];
 24:Pin [0..0] = [CPU_SIZ0..1];
 25:Pin [0..0] = [CPU_AA1..0];
 26:Pin  0  = nCPU_ECS;
 27:Pin  0  = CPU_RW;
 28:Pin  0  = nCPU_AS;
 29:Pin  0  = nSYS_RESET_IN;
 30:Pin  0  = CPU_CLK;
 31:
 32:/* 
 33:                                                Outputs 
 34:   ##########################################################################################
 35:*/
 36:
 37:// To CPU

 38:Pin [0..0] = [nCPU_DSACK0..1];
 39:Pin  0  = nCPU_CIIN;
 40:Pin  0  = nSYS_RESET;
 41:Pin  0  = nCPU_HALT;
 42:Pin  0  = nCPU_BERR;
 43:Pin  0  = nCPU_STERM;
 44:Pin  0  = nCPU_RD;       // An inverted version of the CPU_RW line, used to /OE pins on memory and devices.

 45:
 46:// To Boot Flash

 47:Pin  0  = nBFLASH_CE;
 48:Pin  0  = nBFLASH_WE;
 49:
 50:// To 64M Flash

 51:
 52:Pin  0  = bBIGFLASH_CE;
 53:

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

 54:// To SRAM

 55:
 56:Pin  0  = nSRAM_BANK1_CE;
 57:Pin  0  = nSRAM_BANK2_CE;
 58:Pin  0  = nSRAM_BANK3_CE;
 59:Pin  0  = nSRAM_BANK4_CE;
 60:Pin  0  = nSRAM_LL_SEL;
 61:Pin  0  = nSRAM_LH_SEL;
 62:Pin  0  = nSRAM_UL_SEL;
 63:Pin  0  = nSRAM_UH_SEL;
 64:Pin  0  = nSRAM_OE;             // Might not need this - could use nMEM_OE;

 65:Pin  0  = nSRAM_WE;             // Might not need this - could use CPU_RW;

 66:
 67:// To Devices

 68:Pin  0  = nDEV8BITCS;
 69:Pin  0  = nDEV16BITCS;
 70:Pin  0  = nDEV32BITCS;
 71:Pin  0  = nINT_ACK_CYCLE;
 72:
 73:// To DRAM

 74:
 75:Pin  0  = nDRAM_S1A_RAS;
 76:Pin  0  = nDRAM_S2A_RAS;
 77:Pin  0  = nDRAM_S3A_RAS;
 78:Pin  0  = nDRAM_S4A_RAS;
 79:Pin  0  = nDRAM_S1B_RAS;
 80:Pin  0  = nDRAM_S2B_RAS;
 81:Pin  0  = nDRAM_S3B_RAS;
 82:Pin  0  = nDRAM_S4B_RAS;
 83:Pin  0  = nDRAM_CAS0;
 84:Pin  0  = nDRAM_CAS1;
 85:Pin  0  = nDRAM_CAS2;
 86:Pin  0  = nDRAM_CAS3;
 87:Pin  0  = DRAM_MUX;              // MUX for addess lines going to DRAM (0=ROW, 1=COL)

 88:Pin  0  = nDRAM_DATA_EN;         // Enable the 245 buffers between DRAM and the CPU.

 89:Pin  0  = nDRAM_WE;
 90:
 91:Pin  0  = UNUSED1;
 92:
 93:NODE REFRESH_ACTIVE;
 94:NODE CPU_CLK_div2;
 95:NODE CPU_CLK_div4;
 96:NODE CPU_CLK_div8;
 97:NODE CPU_CLK_div16;
 98:NODE nDRAM_ACCESS_RAS;
 99:NODE REFRESH_COMPLETE;
100:NODE REFRESH_REQUESTED;
101:NODE DRAM_ACCESS_RAS_RESET1;
102:NODE DRAM_ACCESS_RAS_RESET2;
103:NODE nREFRESH_RAS;
104:NODE nREFRESH_CAS;
105:NODE DRAM_ACCESS_MUX;
106:NODE nDRAM_ACCESS_CAS;
107:

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

108:
109:/* Unused pin defauts */
110:nCPU_HALT = 'b'1;
111:nCPU_BERR = 'b'1;
112:nCPU_STERM = 'b'1;
113:nCPU_RD = !CPU_RW;
114:nCPU_CIIN = 'b'1;
115:
116:// UNUSED output forces the allocation of the input pins so they are reserved even if not referenced yet.

117:UNUSED1 = (CPU_A31 & CPU_A30 & CPU_A29 & CPU_A28 & CPU_A27) #  ( CPU_A26 & CPU_A25 & CPU_A24 & CPU_A23 & CPU_A22) # ( CPU_A21 & CPU_A20 & CPU_A19 & CPU_A18 & CPU_A17 );
118:
119:
120:
121:/* 
122:    Clock Generation:
123:    CPU_CLK is the CPU Clock
124:    CPU_CLK is is not held in reset during a SYS_RESET event, so the CPU will have a clock running 
125:    all of the time.
126:
127:    We will also generate some subdivisor clocks to use in the DRAM system.
128:*/
129:
130:
131:CPU_CLK_div2.d = !CPU_CLK_div2;     /* [8],10,12.5,16.5,20 Mhz */
132:CPU_CLK_div2.ck = CPU_CLK;
133:
134:CPU_CLK_div4.d = !CPU_CLK_div4;     /* [4],5,6.25,8.25,10 Mhz */
135:CPU_CLK_div4.ck = CPU_CLK_div2;
136:
137:CPU_CLK_div8.d = !CPU_CLK_div8;     /* [2],2.5,3.125,4.125,5 Mhz */
138:CPU_CLK_div8.ck = CPU_CLK_div4;
139:
140:CPU_CLK_div16.d = !CPU_CLK_div16;
141:CPU_CLK_div16.ck = CPU_CLK_div8;
142:
143:
144:/* 
145:   System Reset Control:
146:
147:   SYS_RESET_IN is an input signal that comes from a reset controller (POWER_CONTROLLER).  It is an active low signal
148:   that indicated a system reset.  When this line goes low the SYS_RESET output will instantly go low.  SYS_RESET will only 
149:   come out of reset on the falling edge of the CPU_CLK.
150:
151:   This logic will guarentee the first CPU_CLK edge after reset is a rising edge 
152:   This makes it possible to have deterministic behaviour on reset startup.
153:
154:*/
155:
156:nSYS_RESET.d = 'b'1;
157:nSYS_RESET.ar = !nSYS_RESET_IN;
158:nSYS_RESET.ck = !CPU_CLK;
159:
160:/* 
161:    Memory Bank Selection Logic:

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

162:
163:    During a write operation the CPU will indicate via the SIZE0-1 and A0-1 pins the number of bytes being written
164:    and the location of the writes on theh 32 bit databus.  It is possible for the CPU to write to a single byte location 
165:    inside of a 32 bit wide memory.  As such we need to have individual control over which part of the data bus is 
166:    participating in a write. 
167:
168:    It is important to note that for cacheable areas of memory (which in our design is all of the SRAM and 
169:    DRAM areas) - All read operations are 32 Bus Access, and all read operations must return all 4 bytes based 
170:    on the address bus.  This is to guarentee the cache always has the correct full 32 value for an addresss.
171:
172:    SEE DATASHEET for TABLE
173:
174:    For 32bit Bus Write Access:
175:            BA32_LL = Active high flag for the LSB 8 bits, located on D31:D24
176:            BA32_LH = Active high flag for the second LSB 8 bits, located on D23:D16
177:            BA32_UL = Active high flag for the lower MSB 8 bits, located on D15:D8
178:            BA32_UH = Active high flag for the upper MSB 8 bits, located on D7:D0
179:
180:    For 16bit Bus  Write Access:
181:            BA16_LL = Active high flag for the LSB 8 bits, located on D31:D24
182:            BA16_LH = Active high flag for the MSB 8 bits, located on D23:D16
183:
184:    For 8bit Bus  Write Access:
185:            BA8 = Active high for all accesses, so hard coded to 1, located on D31:24
186:
187:*/
188:
189:BA32_LL = (!CPU_AA0 & !CPU_AA1);
190:BA32_LH = !((CPU_AA1 # (!CPU_AA0 & CPU_SIZ0 & !CPU_SIZ1)));
191:BA32_UL = !(( (!CPU_AA1 & CPU_SIZ0 & !CPU_SIZ1) 
192:            # (CPU_AA1 & CPU_AA0) 
193:            # (!CPU_AA0 & !CPU_AA1 & !CPU_SIZ0 & CPU_SIZ1)
194:           ));
195:BA32_UH = (   (CPU_AA1 & CPU_SIZ1) 
196:            # (!CPU_SIZ1 & !CPU_SIZ0) 
197:            # (CPU_AA0 & CPU_SIZ1 & CPU_SIZ0) 
198:            # (CPU_AA0 & CPU_AA1)
199:          );
200:
201:BA16_LL = !CPU_AA0;
202:BA16_LH = !(!CPU_AA0 & CPU_SIZ0 & !CPU_SIZ1);
203:
204:BA8 = 'b'1;
205:
206:/* FC pins
207:
208:    The FC pins are used by the CPU to indicate the type of memory access.  
209:    We are not using the USER and SUPERVISOR types, so we only need to know if the 
210:    access is a CPU_SPACE or not.
211:*/
212:
213:FC_CPU_SPACE = CPU_FC0 & CPU_FC1 & CPU_FC2;
214:
215:/* 

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

216:    Region selection logic:
217:
218:    These variables are active high indicators of access to a particular area of memory.
219:
220:    DRAM_REGION_ACCESS - Any access to the upper 2GB of address space
221:    BOOTFLASH_REGION_ACCESS - Any access to 0x0000 0000 to 0x0FFF FFFF
222:    SRAM_REGION_ACCESS - Any access to 0x1000 0000 to 0x1FFF FFFF
223:    DEV8BIT_REGION_ACCESS - Any access to 0x3000 0000 to 0x3FFF FFFF
224:    DEV16BIT_REGION_ACCESS - Any access to 0x4000 0000 to 0x4FFF FFFF
225:    DEV32BIT_REGION_ACCESS - Any access to 0x5000 0000 to 0x5FFF FFFF
226:    VIDEO_REGION_ACCESS - Any access to 0x6000 0000 to 0x7FFF FFFF
227:    INTERRUPT_ACK_ACCESS - Any access in the CPU Space that is also an Interrupt ACK (Determined by A16-A19)
228:
229:*/
230:
231:DRAM_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & CPU_A31 # !REFRESH_ACTIVE;                                  // 0x8000 0000 - 0xFFFF FFFF

232:BOOTFLASH_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & !CPU_A30 & !CPU_A29 & !CPU_A28 & !CPU_A27;  // 0x0000 0000 - 0x07FF FFFF

233:BIGFLASH_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & !CPU_A30 & !CPU_A29 & !CPU_A28 & CPU_A27;    // 0x0800 0000 - 0x0FFF FFFF

234:SRAM_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & !CPU_A30 & !CPU_A29 & CPU_A28;                   // 0x1000 0000 - 0x1FFF FFFF

235:DEV8BIT_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & !CPU_A30 
236:                        & CPU_A29 & CPU_A28;                                                                // 0x3000 0000 - 0x3FFF FFFF

237:DEV16BIT_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & CPU_A30 
238:                        & !CPU_A29 & !CPU_A28;                                                              // 0x4000 0000 - 0x4FFF FFFF

239:DEV32BIT_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & CPU_A30 
240:                        & !CPU_A29 & CPU_A28;                                                               // 0x5000 0000 - 0x5FFF FFFF

241:VIDEO_REGION_ACCESS = !FC_CPU_SPACE & !nCPU_AS & !CPU_A31 & CPU_A30 & CPU_A29;                              // 0x6000 0000 - 0x7FFF FFFF

242:INTERRUPT_ACK_ACCESS =  !nCPU_AS & FC_CPU_SPACE & CPU_A16 & CPU_A17 & CPU_A18 & CPU_A19;
243:
244:nINT_ACK_CYCLE = !INTERRUPT_ACK_ACCESS;
245:
246:/*
247:    DSACK Generation 
248:
249:    This logic generates the two DSACK signals back to the CPU.  These 2 signals are used to both indicated the need for 
250:    an additional wait state as well as to signal if the bus transfer is going to a device that supports 32 bits, 16 bits,
251:    or 8 bits.
252:
253:    This logic relies on the xxxx_REGION_ACCESS variables above to know which combination of DSACK signals to apply.
254:    Since in this initial system both the DRAM and SRAM are 0 WS, the logic will always assert the correct DSACK
255:    combination as soon as the above xxxx_REGION_ACCESS variables are active.  That should happen directly after the 
256:    CPU_AS signal goes low.
257:
258:    Transfer Size      DSACK1   DSACK0
259:    8 bit               1          0            DEV8BIT,BOOTFLASH,INTACK
260:    16 bit              0          1            DEV16BIT,BIGFLASH
261:    32 bit              0          0            DEV32BIT,DRAM,SRAM
262:
263:    Since the xxxx_REGION_ACCESS variables contain nCPU_AS, these DSACK signals will go low shortly after AS, but then 
264:    go high when AS returns to high at the end of the cycle.   The address bits are guarenteed to be stable before AS 
265:    goes low and held stable until AS goes high.
266:
267:    The DRAM_REGION_ACCESS flag also includes the REFRESH_ACTIVE flag.  That flag will keep the DRAM_REGION_ACCESS from
268:    going high even if the active CPU cycle is a DRAM access.  As a result the DSACK lines will not get asserted and the CPU
269:    will insert wait states.  As soon as the REFRESH completes, the REFRESH_ACTIVE flag will go to 0 which will allow 

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

270:    the DRAM_REGION_ACCESS flag to go to 1.  This transistion will start the DRAM access, which will then assert the DSACK 
271:    signals ending the wait states the CPU inserted.
272:
273:    Interrupt Ack Access is set to 8 bits since the INTCTRL (Interrupt controller) is 8 bit.
274:
275:*/
276:
277:nCPU_DSACK0 = !( DRAM_REGION_ACCESS # SRAM_REGION_ACCESS # DEV32BIT_REGION_ACCESS # DEV8BIT_REGION_ACCESS # INTERRUPT_ACK_ACCESS # BOOTFLASH_REGION_ACCESS);
278:nCPU_DSACK1 = !( DRAM_REGION_ACCESS # SRAM_REGION_ACCESS # DEV32BIT_REGION_ACCESS # DEV16BIT_REGION_ACCESS # BIGFLASH_REGION_ACCESS );
279:
280:/* Boot Flash signaling */
281:
282:nBFLASH_CE = !BOOTFLASH_REGION_ACCESS;
283:nBFLASH_WE = !BOOTFLASH_REGION_ACCESS # CPU_RW;
284:
285:/* 64MB Flash signaling */
286:
287:nBIGFLASH_CE = !BIGFLASH_REGION_ACCESS;
288:
289:
290:/*
291:    SRAM signaling
292:
293:    Control signals for SRAM - 
294:
295:        There are 4 banks of SRAM, and each bank is 2 IC that are 16 bits wide.  Each IC has a CE, WE, OE, 
296:        UB, LB.  Since this SRAM region is cacheable all reads are 32 bits regardless of the internal 
297:        operation in the CPU.  Writes however must be controlled by the 8 bit section using the 
298:        "Memory Bank Selection Logic" from above.
299:
300:        Each bank is 1MB of address space.
301:
302:        nSRAM_BANK1_CE -> 0x1000 0000 - 0x100F FFFF  [1MB]
303:        nSRAM_BANK2_CE -> 0x1010 0000 - 0x101F FFFF  [1MB]
304:        nSRAM_BANK3_CE -> 0x1020 0000 - 0x102F FFFF  [1MB]
305:        nSRAM_BANK4_CE -> 0x1030 0000 - 0x103F FFFF  [1MB]
306:
307:        nSRAM_LL_SEL
308:        nSRAM_LH_SEL
309:        nSRAM_UL_SEL
310:        nSRAM_UH_SEL
311:        nSRAM_OE
312:        nSRAM_WE
313:*/
314:
315:nSRAM_BANK1_CE = !SRAM_REGION_ACCESS # CPU_A27 # CPU_A26 # CPU_A25 # CPU_A24 # CPU_A23 # CPU_A22 # CPU_A21 # CPU_A20;
316:nSRAM_BANK2_CE = !SRAM_REGION_ACCESS # CPU_A27 # CPU_A26 # CPU_A25 # CPU_A24 # CPU_A23 # CPU_A22 # CPU_A21 # !CPU_A20;
317:nSRAM_BANK3_CE = !SRAM_REGION_ACCESS # CPU_A27 # CPU_A26 # CPU_A25 # CPU_A24 # CPU_A23 # CPU_A22 # !CPU_A21 # CPU_A20;
318:nSRAM_BANK4_CE = !SRAM_REGION_ACCESS # CPU_A27 # CPU_A26 # CPU_A25 # CPU_A24 # CPU_A23 # CPU_A22 # !CPU_A21 # !CPU_A20;
319:
320:nSRAM_OE = !CPU_RW;         // Can be enabled even when not doing SRAM access because above CE is also required.

321:nSRAM_WE = CPU_RW;          // WE can also be enabled for all writes since both CE and one of the UB or LB must also 

322:                            // be low. 

323:

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

324:// For each of the 4 bank selects, if we are doing a read it will be selected(low), and if we are doing a write

325:// it will depend on the value of the BA32_xx functions.  This will enable the correct byte section during a write

326:// based on the CPU indicating a BYTE, WORD, and DWORD write as well as the misalignment of that write.

327:
328:
329:nSRAM_LL_SEL = !(CPU_RW # BA32_LL);
330:nSRAM_LH_SEL = !(CPU_RW # BA32_LH);
331:nSRAM_UL_SEL = !(CPU_RW # BA32_UL);
332:nSRAM_UH_SEL = !(CPU_RW # BA32_UH);
333:
334:/* 
335:    Device Chip Select Logic:
336:
337:        These chip selects indicate the 8,16, or 32 device region.  All devices in those regions must do transfers
338:        of the particular region size.  This chip select can be used in decode logic combined with the lower address 
339:        lines to create the actual device chip selects.
340:
341:        In this first iteration there is no feedback mechinism for the devices to ask for waitstates, but that 
342:        will be added later.
343:
344:*/
345:
346:nDEV8BITCS = DEV8BIT_REGION_ACCESS;
347:nDEV16BITCS = DEV16BIT_REGION_ACCESS;
348:nDEV32BITCS = DEV32BIT_REGION_ACCESS;
349:
350:/* 
351:    DRAM Access Logic:
352:
353:    This logic will allow control of 60ns FPM/EDO DRAM.  This design is configured for 8 single or dual rake 
354:    SIMM slots, and in this first iteration configured for 11 bits of row/column address.
355:
356:*/
357:
358:/*  
359:    This DRAM_ACCESS_RAS flip flop is the master access RAS signal.  It goes low at the start of a 
360:    DRAM cycle (as indicated by the DRAM_REGION_ACCESS going high).  It is reset by a RAS_RESET2 flag
361:    that is based on two further flip flips that count down two clock cycles.  In this design the RAS
362:    signal will go low at the start of the /AS cycle, and go high after two sucsessive falling edges
363:    of the CPU clock.
364:*/
365:nDRAM_ACCESS_RAS.d = 'b'0;
366:nDRAM_ACCESS_RAS.ap = DRAM_ACCESS_RAS_RESET2 # !nSYS_RESET;
367:nDRAM_ACCESS_RAS.ck = DRAM_REGION_ACCESS;
368:
369:/* 
370:    The two RAS RESET flip flops are held in reset until the DRAM_ACCESS_RAS goes low.   After two 
371:    successive CPU_CLK negative edges the DRAM_ACCESS_RAS will be set back to 1 by RESET2.
372:*/
373:DRAM_ACCESS_RAS_RESET1.d = 'b'1;
374:DRAM_ACCESS_RAS_RESET1.ar = nDRAM_ACCESS_RAS # !nSYS_RESET;
375:DRAM_ACCESS_RAS_RESET1.ck = !CPU_CLK;
376:
377:DRAM_ACCESS_RAS_RESET2.d = DRAM_ACCESS_RAS_RESET1;

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

378:DRAM_ACCESS_RAS_RESET2.ar = nDRAM_ACCESS_RAS # !nSYS_RESET;
379:DRAM_ACCESS_RAS_RESET2.ck = !CPU_CLK;
380:
381:/*
382:    The CAS signal is generated by using the above RAS_RESET1 signal, which occurs on the first negative clock
383:    edge after RAS falls, to start the CAS signal.   This guarentees the CAS signal is after RAS with enough
384:    time, and that the CAS to data has enough time as well.  CAS is reset to 1 at the end of the cycle via 
385:    the DRAM_REGION_ACCESS signal.
386:*/
387:
388:nDRAM_ACCESS_CAS.d = 'b'0;
389:nDRAM_ACCESS_CAS.ap = !DRAM_REGION_ACCESS # !nSYS_RESET;
390:nDRAM_ACCESS_CAS.ck = DRAM_ACCESS_RAS_RESET1;
391:
392:/*
393:    The third critical signal for DRAM access is the MUX signal which switches the address lines on the DRAM
394:    from the ROW to the COLUMN address.  This much be done after the RAS signal has gone to 0, and before the 
395:    CAS signal goes to 0.  There is RAS holdtime requirement of 10ns, and CAS setup requirement if 10ns, and a 
396:    MUX propegation delay of at least 7ns.
397:
398:    The solution is the change the MUX signal based on the DRAM_ACCESS_RAS signal.  As soon as the RAS signal goes low, 
399:    the MUX signal will start to change.  The MUX change will be 7.5ns behind the RAS signal, and the MUX itself
400:    will take another 7ns to change outputs.  This will give the needed RAS hold time.
401:
402:    MUX = 0 for ROW address, 1 for COL address.  Reset puts it at 0. 
403:*/
404:
405:DRAM_ACCESS_MUX.d = 'b'1;
406:DRAM_ACCESS_MUX.ar = !DRAM_REGION_ACCESS # !nSYS_RESET;
407:DRAM_ACCESS_MUX.ck = !nDRAM_ACCESS_RAS;
408:
409:/* 
410:    DRAM Refresh Logic:
411:
412:    DRAM requires a refresh cycle to keep data stored in the DRAM uncorrupted.  The 72 pin SIMM DRAMS used in this project
413:    support a refresh method call CAS_BEFORE_RAS (CBR).  This refresh method only requires that a CBR refresh cycle occur 
414:    and does not require the host machine to maintain and increment a row address.  That address counting is done inside the
415:    DRAM unit.  Most of the 72 pin DRAMs need a refresh either every 32 or 64ms depending on the number of rows.  This usually
416:    translates to a refresh cycled needed every 15.6us.
417:
418:*/
419:
420:
421:NODE  [REFRESH_TIMER0..5];
422:NODE REFRESH_TIMER_RESET;
423:
424:
425:/* 
426:   5 bit counter for refresh time. In order to get a 15us cycle, this counter uses the following table:
427:
428:   CPU          CPU/16          Timer_Reset_Value for 15us
429:   16 MHz       1 MHz           15 = 15us
430:   20 MHz       1.25 Mhz        19 = 15.2us
431:   25 MHz       1.56 MHz        24 = 15.26us

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

432:   33 MHz       2.06 MHz        31 = 15 us
433:   40 MHz       2.5 MHz         38 = 15.2 us
434:
435:
436:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
437:
438:   The REFESH_TIMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
439:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
440:   0x08.
441:*/
442:
443:
444:/* Create a 5 bit timer */
445:REFRESH_TIMER0.d = !REFRESH_TIMER0;
446:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
447:
448:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !(REFRESH_TIMER1 & REFRESH_TIMER0))
449:                 # ( !REFRESH_TIMER2 & (REFRESH_TIMER1 & REFRESH_TIMER0) );
450:
451:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !(REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0))
452:                 # ( !REFRESH_TIMER3 & (REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0) );
453:
454:REFRESH_TIMER4.d = ( REFRESH_TIMER4 & !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0))
455:                 # ( !REFRESH_TIMER4 & (REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0) );
456:
457:[REFRESH_TIMER0..4].ck = CPU_CLK_div16;
458:[REFRESH_TIMER0..4].ar = REFRESH_TIMER_RESET # !nSYS_RESET;
459:
460:/* REFRESH_TIMER_RESET will pulse for 1 clock cycle when the timer reaches 15 */
461:
462:REFRESH_TIMER_RESET.d = (REFRESH_TIMER0 & REFRESH_TIMER1 & REFRESH_TIMER2 & REFRESH_TIMER3 & !REFRESH_TIMER4);  // 15

463:REFRESH_TIMER_RESET.ck = !CPU_CLK_div8;
464:REFRESH_TIMER_RESET.ar = !nSYS_RESET;
465:
466:/* 
467:   When the REFRESH_TIMER_RESET flip flop goes high, we need to do a REFRESH cycle.  We will toggle on a REFRESH_REQUESTED 
468:   flag to indicate the need to do a refresh. 
469:*/
470:
471:REFRESH_REQUESTED.d = 'b'1;
472:REFRESH_REQUESTED.ck = REFRESH_TIMER_RESET;
473:REFRESH_REQUESTED.ar = !nSYS_RESET # REFRESH_COMPLETE;    
474:
475:/*  
476:    Once the refresh requested signal is high, we will wait for an opportunity to start the refresh cycle.  We need to wait 
477:    for the bus to be free.  We will accomplsish this by waiting the AS to be high during a rising CPU clocked combined
478:    with the REFRESH_REQUESTED also being high.  This will set the REFRESH_ACTIVE flip flip on in the condition that we are 
479:    at least 1/2 cycle away from another AS low, which is enough time for the DRAM_REGION_ACTIVE flag to be disabled (to
480:    prevent DRAM access during a refresh).
481:
482:    REFRESH_ACTIVE.d also has REFRESH_ACTIVE as in input, when means once the flip flop goes to 1, it will stay 
483:    there until the reset activity happens.
484:    
485:    This flag is used in the DRAM_REGION_ACTIVE to prevent DRAM access as soon as this flag is active.  That will force the insertion of waitstates

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 10

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

486:    by the CPU until the REFRESH is complete and a DRAM transaction can start.
487:
488:*/
489:
490:REFRESH_ACTIVE.d = REFRESH_REQUESTED # nCPU_AS # REFRESH_ACTIVE;
491:REFRESH_ACTIVE.ck = CPU_CLK;
492:REFRESH_ACTIVE.ar = !nSYS_RESET # REFRESH_COMPLETE;         
493:
494:/*  When REFRESH_ACTIVE goes high, it is time to do a refresh cycle.  We will use a 3 bit counter to count CPU cycles.
495:    This state machine will be held in reset until the REFRESH_ACTIVE flag goes active.  At that point it will start counting 
496:    CPU cycles.  Since this state machine is clocked on the falling clock edge, and the ACTIVE signal is clocked on the rising clock edge
497:    this machine will go to state 1 exactly 1/2 a CPU cycle after the ACTIVE flag is set.
498:*/
499:
500:NODE [REFRESH_STATE_MACHINE0..2];
501:FIELD field_REFRESH_STATE_MACHINE = [REFRESH_STATE_MACHINE0..2];         // a field is used to make it simplier to refer to state machine values

502:
503:[REFRESH_STATE_MACHINE0..2].ck = !CPU_CLK;
504:[REFRESH_STATE_MACHINE0..2].ar = !REFRESH_ACTIVE # REFRESH_COMPLETE # nSYS_RESET;
505:
506:REFRESH_STATE_MACHINE0.d = !REFRESH_STATE_MACHINE0;
507:REFRESH_STATE_MACHINE1.d = (REFRESH_STATE_MACHINE1 & !REFRESH_STATE_MACHINE0)
508:                        #  (!REFRESH_STATE_MACHINE1 & REFRESH_STATE_MACHINE0);
509:REFRESH_STATE_MACHINE2.d = (REFRESH_STATE_MACHINE2 & !(REFRESH_STATE_MACHINE0 & REFRESH_STATE_MACHINE1))
510:                        #  (!REFRESH_STATE_MACHINE2 & (REFRESH_STATE_MACHINE0 & REFRESH_STATE_MACHINE1));
511:
512:
513:/* From the above state machine we can create the REFRESH CAS and RAS signals.  This state machine will only start running when the
514:   REFRESH_ACTIVE flag is set.   State 1 and State 2 are used for the CAS signal being low, and State 3 and State 4 for the RAS signal.
515:   Finially, State 5 is used to set a REFRESH_COMPLETE flag, which will be active for one full clock cycle.
516:
517:   The REFRESH_COMPLETE flag will reset the state machine to zero, as well as reset the 
518:
519:*/
520:
521:nREFRESH_CAS.d = !(field_REFRESH_STATE_MACHINE:['d'1,'d'2]);
522:nREFRESH_CAS.ck = CPU_CLK;
523:nREFRESH_CAS.ap = !nSYS_RESET # !REFRESH_ACTIVE;
524:
525:nREFRESH_RAS.d = !(field_REFRESH_STATE_MACHINE:['d'3,'d'4]);
526:nREFRESH_RAS.ck = CPU_CLK;
527:nREFRESH_RAS.ap = !nSYS_RESET # !REFRESH_ACTIVE; 
528:
529:REFRESH_COMPLETE.d = (field_REFRESH_STATE_MACHINE:['d'5]);
530:REFRESH_COMPLETE.ck = CPU_CLK;
531:REFRESH_COMPLETE.ar = !nSYS_RESET;
532:
533:
534:/* Actual DRAM signals:
535:
536:    The actual signals to the DRAM modules need to be built up from three sources - The nDRAM_ACCESS_* signals, the nREFRESH_* signals, and the
537:    the memory address being accessed.   The nDRAM_ACCESS_* is guarenteed to not be active at the same time as the nREFRESH_* signals, so they can
538:    be directly combined to build the correct RAS and CAS signals.
539:

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 11

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

540:    The final RAS signals will combine the nDRAM_ACCESS_RAS and nREFRESH_RAS signals.
541:
542:    Each 72 pin SIMM has 4 RAS signals in 2 groups RAS0/RAS2 and RAS1/RAS3.  Those two groups represent two 'ranks'.   
543:    In this design we will map all of the first 'ranks' of each SIMM slot in order, then map the second 'ranks' of each 
544:    SIMM.
545:
546:    For this first iteration we will assume each 'rank' is 16MBs in size.  128MB support will require a few small changes.
547:
548:    The memory layout:
549:
550:    -------------------------------------------------
551:    - 0x8000 0000   SIMM1 Rank A        0x80FF FFFF
552:    -------------------------------------------------
553:    -------------------------------------------------
554:    - 0x8100 0000   SIMM2 Rank A        0x81FF FFFF
555:    -------------------------------------------------
556:     -------------------------------------------------
557:    - 0x8200 0000   SIMM3 Rank A        0x82FF FFFF
558:    -------------------------------------------------
559:    -------------------------------------------------
560:    - 0x8300 0000   SIMM4 Rank A        0x83FF FFFF
561:    -------------------------------------------------
562:      -------------------------------------------------
563:    - 0x8400 0000   SIMM1 Rank B        0x84FF FFFF
564:    -------------------------------------------------
565:    -------------------------------------------------
566:    - 0x8500 0000   SIMM2 Rank B        0x85FF FFFF
567:    -------------------------------------------------
568:     -------------------------------------------------
569:    - 0x8600 0000   SIMM3 Rank B        0x86FF FFFF
570:    -------------------------------------------------
571:    -------------------------------------------------
572:    - 0x8700 0000   SIMM4 Rank B        0x87FF FFFF
573:    -------------------------------------------------
574:*/
575:
576:/* We will use a bit field to make address range comparisons easier to read. */
577:
578:FIELD field_CPU_ADDRESS = [CPU_A31..20];
579:nDRAM_S1A_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X0XXXXXX])) & nREFRESH_RAS;
580:nDRAM_S2A_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X1XXXXXX])) & nREFRESH_RAS;
581:nDRAM_S3A_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X2XXXXXX])) & nREFRESH_RAS; 
582:nDRAM_S4A_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X3XXXXXX])) & nREFRESH_RAS;
583:
584:nDRAM_S1B_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X4XXXXXX])) & nREFRESH_RAS;
585:nDRAM_S2B_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X5XXXXXX])) & nREFRESH_RAS;
586:nDRAM_S3B_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X6XXXXXX])) & nREFRESH_RAS;
587:nDRAM_S4B_RAS = (nDRAM_ACCESS_RAS # !(field_CPU_ADDRESS:['h'X7XXXXXX])) & nREFRESH_RAS;
588:
589:/* 
590:        The CAS lines are shared across all of the SIMM slots and ranks.  
591:
592:        CAS0 - D7:D0            BA32_UH = Active high flag for the upper MSB 8 bits, located on D7:D0
593:        CAS1 - D15:D8           BA32_UL = Active high flag for the lower MSB 8 bits, located on D15:D8

LISTING FOR LOGIC DESCRIPTION FILE: BUSCTRL.pld                      Page 12

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Wed Apr 03 12:33:22 2024

594:        CAS2 - D23:D16          BA32_LH = Active high flag for the second LSB 8 bits, located on D23:D16
595:        CAS3 - D31:D24          BA32_LL = Active high flag for the LSB 8 bits, located on D31:D24
596:
597:        We will mask the CAS signal based on the BA32 signals during a write operation.  For a read 
598:        operation all 4 CAS lines will be active.
599:
600:
601:*/
602:
603:
604:nDRAM_CAS0 = (nDRAM_ACCESS_CAS # (!CPU_RW & !BA32_UH )) & nREFRESH_CAS;
605:nDRAM_CAS1 = (nDRAM_ACCESS_CAS # (!CPU_RW & !BA32_UL )) & nREFRESH_CAS;
606:nDRAM_CAS2 = (nDRAM_ACCESS_CAS # (!CPU_RW & !BA32_LH )) & nREFRESH_CAS;
607:nDRAM_CAS3 = (nDRAM_ACCESS_CAS # (!CPU_RW & !BA32_LL )) & nREFRESH_CAS;
608:
609:DRAM_MUX = DRAM_ACCESS_MUX;
610:/* 
611:   nDRAM_DATA_EN is connected to the 74HC245 buffers that go between the DRAM and the CPU.  They are enabled as soon as we start
612:   a DRAM transaction.  The direction of these buffers it set by CPU_RW, which is connected to the DIR pin on the 245.
613:*/
614:nDRAM_DATA_EN = !DRAM_REGION_ACCESS;
615:
616:/*
617:   nDRAM_WE is the DRAM write signal, which is pulled low at the start of a DRAM transaction that also has CPU_RW == 0.   This signal goes to
618:   all of the SIMM slots, and the RAS/CAS signals select which DRAMs will actually do write operations.
619:*/
620:nDRAM_WE = !(DRAM_REGION_ACCESS & !CPU_RW);
621:
622:/*
623:Total dedicated input used:     2/4     (50%)
624:Total I/O pins used             68/80   (85%)
625:Total Logic cells used          69/128  (53%)
626:Total Flip-Flop used            25/128  (19%)
627:Total Foldback logic used       8/128   (6%)
628:Total Nodes+FB/MCells           77/128  (60%)
629:Total cascade used              0
630:Total input pins                31
631:Total output pins               39
632:Total Pts                       199
633:*/
634:
635:
636:
637:



