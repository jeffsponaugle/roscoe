Name	 INTCTRL;
PartNo   INTCTRL;
Date     03/30/2024;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508isptqfp100;

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};


/* 
                                                Inputs
    ##########################################################################################
*/

// From CPU
Pin[71,72,75,76] = [CPU_A3..0];
Pin[70] = CPU_RW;
Pin[57,58,60,61,63,64,65,67] = [CPU_D7..0];     // Hooked to D31:D24 since this is an 8 bit device

// From Bus Controller CPLD
Pin[87] = CPU_CLK;
Pin[88] = nSYS_RESET;
Pin[89] = nINTCTRL_CS;
Pin[90] = nINT_ACK_CYCLE;           // Active low signal indicating the start of an Interrupt Acknowledge Cycle from the CPU

// Incoming Interrupt Lines

Pin[8] = vINT7A;
Pin[9,10] = vINT6A,vINT6B;
Pin[12,13,14,16] = vINT5A, vINT5B,vINT5C,vINT5D;
Pin[19,20,21] = vINT4A, vINT4B,vINT4C;
// vINT3A is generated internally from the USB interrupt flags, so it does not need to be exposed externally.
//Pin[23] = vINT3A;
Pin[24] = vINT3B;
Pin[25,27] = vINT2A, vINT2B;
Pin[29,30] = vINT1A, vINT1B;

// USB inputs
Pin[1] = nUSB_DATAACK;
Pin[99] = nUSB_RXF;
Pin[100] = nUSB_TXE;
Pin[56] = nUSB_CS;            // Active low signal from DEV CPLD indicated an 8 bit access to the USB controller.


/* 
                                                Outputs
    ##########################################################################################
*/

Pin[52,53,54] = [CPU_IPL2..0];
Pin[45] = POWER_CONTROL_OUT;
Pin[46] = RESET_CONTROL_OUT;

// USB outputs
Pin[6] = nUSB_RD;
Pin[5] = nUSB_WR;
Pin[2] = nUSB_DATAREQ;

// Extra pins

Pin[31] = EXP_INT_CPLD1;
Pin[32] = EXP_INT_CPLD2;

Pin[77] = EXTRA_DM_INT1;
Pin[78] = EXTRA_DM_INT2;
Pin[79] = EXTRA_BC_INT1;
Pin[80] = EXTRA_BC_INT2;
Pin[40,41,42] = [TESTP0..2];



Pin = UNUSED1;
UNUSED1 = EXTRA_DM_INT1 & EXTRA_DM_INT2 & EXTRA_BC_INT1 & EXTRA_BC_INT2 # TESTP0 # TESTP1 # TESTP2 ;
EXP_INT_CPLD1 = 'b'0;
EXP_INT_CPLD2 = 'b'0;



/* 
                                                Internal NODES
    ##########################################################################################
*/
PINNODE = [INT_ACK_LEVEL2..0];       // a recording of the current interrupt acknowledged from the CPU
PINNODE =  [INT_MSK15..0];            // 16 bit Interrupt Mask.  15=INT7A...0=INT1B

PINNODE =  POWER_CONTROL_STATE;
PINNODE =  INT7A_REQUEST;
PINNODE =  INT6A_REQUEST;
PINNODE =  INT6B_REQUEST;
PINNODE =  INT1B_REQUEST;
PINNODE =  INT_ACK_RESET_PRE;
PINNODE =  INT_ACK_RESET;

// The following NODES are in place to compact the total size of some later fields.  The use of NODES adds a bit of latency
// but allows the complex expressions to compile and optmize correctly.
PINNODE =  INTL6_REQUEST_PE;
PINNODE =  INTL5_REQUEST_PE;
PINNODE =  INTL4_REQUEST_PE;
PINNODE =  INTL3_REQUEST_PE;
PINNODE =  INTL2_REQUEST_PE;
PINNODE =  INTL1_REQUEST_PE;
PINNODE =  INT5D_REQUEST_PE;
PINNODE =  INT5C_REQUEST_PE;
PINNODE =  INT4C_REQUEST_PE;
PINNODE =  INT6B_REQUEST_PE;
PINNODE =  INT5B_REQUEST_PE;
PINNODE =  INT4B_REQUEST_PE;
PINNODE =  INT3B_REQUEST_PE;
PINNODE =  INT2B_REQUEST_PE;

PINNODE =  USB_RXF_INT_MASK;
PINNODE =  USB_TXE_INT_MASK;

/* 
    Interrupt Mask Register 
    Byte Write to high,then low. 
    1=Enable Interrupt, 0=Disable Interrupt
    RESETs to all 0
*/

[INT_MSK15..8].ck = nINTCTRL_CS # CPU_RW # CPU_A0 # CPU_A1 # CPU_A2 # CPU_A3;               // An 8 bit write to 0x3000 0200
[INT_MSK7..0].ck = nINTCTRL_CS # CPU_RW # !CPU_A0 # CPU_A1 # CPU_A2 # CPU_A3;               // An 8 bit write to 0x3000 0201
[INT_MSK15..0].ar = !nSYS_RESET;
[INT_MSK15..8].d = [CPU_D7..0].io;
[INT_MSK7..0].d = [CPU_D7..0].io;

/* Power Control and Reset Control Register */

POWER_CONTROL_STATE.d = CPU_D0.io;
POWER_CONTROL_STATE.ck = nINTCTRL_CS # CPU_RW # CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3;         // An 8-bit write to 0x3000 0202
POWER_CONTROL_STATE.ar = !nSYS_RESET;

POWER_CONTROL_OUT = 'b'1;
POWER_CONTROL_OUT.oe = POWER_CONTROL_STATE;

RESET_CONTROL_OUT.d = CPU_D1.io;
RESET_CONTROL_OUT.ck = nINTCTRL_CS # CPU_RW # CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3;            // An 8-bit write to 0x3000 0202
RESET_CONTROL_OUT.ar = !nSYS_RESET;


/*  
    nUSB_DATAREQ is a signal to the USB controller to switch to 'DATA' mode.  
    This is on bit 0 of CPU addresss 0x30000203

    USB_RXF_INT_MASK allows RXF interrupts from the USB to trigger the USB system interrupt.
    USB_TXE_INT_MASK allows TXE interrupts from the USB to trigger the USB system interrupt.
    Both flags are active high, so if ==1, interrupt is allowed,  ==0 blocks interruts.

    bit 7 - USB_DATAREQ signal to the USB controller
    bit 6 - Enable RXF interrupts to go to the interrupt controller.
    bit 5 - Enable TXE interrupts to go to the interrupt controller.

    We also want to be able to read back the interrupt status (not the mask).  We will do that in the 
    data line driver section. 

*/

nUSB_DATAREQ.d = CPU_D7.io;
nUSB_DATAREQ.ck = nINTCTRL_CS # CPU_RW # !CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3;                // An 8 bit write to 0x3000 0203
nUSB_DATAREQ.ar = !nSYS_RESET;

USB_RXF_INT_MASK.d = CPU_D6.io;
USB_RXF_INT_MASK.ck = nINTCTRL_CS # CPU_RW # !CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3;
USB_RXF_INT_MASK.ar = !nSYS_RESET;

USB_TXE_INT_MASK.d = CPU_D5.io;
USB_TXE_INT_MASK.ck = nINTCTRL_CS # CPU_RW # !CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3;
USB_TXE_INT_MASK.ar =  !nSYS_RESET;

/* 
   USB Interface handling:

   vINT3A is defined internally from the input from USB combined with the USB masks.  This signal is then used like the 
   other interrupt signals, including the interrupt level mask register which can mask all interrupts of a given level.
   vINT3A is active low to indicate an interrupt action is needed, and the signals from the USB controller are also
   active low.  The INT_MASK registers values are active high to allow that specific interrupt to pass thru
*/

vINT3A = !((USB_RXF_INT_MASK & !nUSB_RXF) # (USB_TXE_INT_MASK & !nUSB_TXE));

/* 
   nUSB_RD goes low to fetch a data item from the USB FIFO and drive it on the USB output databus.   There is no single 
   dedicated CS (Chip Select) for this USB controller.  The RD line is both a chip select and an output enable.
   We will drive the RD line low using an externally generated chip select signal along with the CPU_RW signal.
   The USB_WR is similiar but for writes, so it uses the same logic.
   We could add logic to protect these signals so they can't be asserted if the corresponding flag values
   are not also asserted, but we need to confirm the timing of those flags gettig cleared to make sure it would 
   not effect the signal timing. ** TODO after build **
*/

nUSB_RD = nUSB_CS # !CPU_RW;        // We could add protection for RXF being low.
nUSB_WR = nUSB_CS # CPU_RW;         // We could add protection for TXE being low.


/*
    At the start of the Interrupt Acknowlegement Cycle we will record the interrupt level being acknowledged in the INT_ACK_LEVEL0..2 flip flops.
    Those same flip flops are used during the vector generation, as well as ackowledgement clearing at the end of the ack cycle.  These will remember 
    the last interrupt ack number as these are not cleared but only reset on the next intack.
*/

[INT_ACK_LEVEL2..0].ck = !nINT_ACK_CYCLE;
[INT_ACK_LEVEL2..0].ar = !nSYS_RESET;
INT_ACK_LEVEL0.d = CPU_A1;
INT_ACK_LEVEL1.d = CPU_A2;
INT_ACK_LEVEL2.d = CPU_A3;
FIELD field_INT_ACK_LEVEL = [INT_ACK_LEVEL2..0];            // This field is just a convient way to do numerical selection of a value.


// Interrupt Lines converted to Interrupt Requests (active high).  

// INT7A is the debug button which is an falling edge triggered interrupt.
INT7A_REQUEST.d = INT_MSK15;
INT7A_REQUEST.ck = !vINT7A;
INT7A_REQUEST.ar = !nSYS_RESET # (INT_ACK_RESET & INT7A_REQUEST & field_INT_ACK_LEVEL:['d'7]);         // If INT7A_REQUEST is set, and we are ack'ing a level 7, clear this.

// INT6A and INT6B come from the PTC.  The are falling edge triggers so they need
// capture flip flops.

INT6A_REQUEST.d = INT_MSK14;
INT6A_REQUEST.ck = !vINT6A;
INT6A_REQUEST.ar = !nSYS_RESET # (INT_ACK_RESET & INT6A_REQUEST_PE & field_INT_ACK_LEVEL:['d'6]);         // TOOD Needs some kind of ACK clear.

INT6B_REQUEST.d = INT_MSK13;
INT6B_REQUEST.ck = !vINT6B;
INT6B_REQUEST.ar = !nSYS_RESET # (INT_ACK_RESET & INT6B_REQUEST_PE & field_INT_ACK_LEVEL:['d'6]);         // TOOD Needs some kind of ACK clear.

INT5A_REQUEST = !vINT5A & INT_MSK12;        // INT5A comes from the NIC.  Active low signal.
INT5B_REQUEST = !vINT5B & INT_MSK11;        // INT5B comes from the IDE #1 interfaces.  Active low signal
INT5C_REQUEST = !vINT5B & INT_MSK10;        // INT5C comes from the IDE #2 interfaces.  Active low signal
INT5D_REQUEST = !vINT5D & INT_MSK9;         // INT5D in an expansion interrupt (undefined)  Make active low, with pullup
INT4A_REQUEST = vINT4A & INT_MSK8;          // INT4A is UART1.  The 2550 UARTs are active high interrupts
INT4B_REQUEST = vINT4B & INT_MSK7;          // INT4B is UART2.  The 2550 UARTs are active high interrupts
INT4C_REQUEST = !vINT4C & INT_MSK6;         // INT4C in an expansion interrupt (undefined)  Make active low, with pullup
INT3A_REQUEST = !vINT3A & INT_MSK5;         // INT3A comes from the USB interface mixer, which then comes from USB.  Active low signal.
INT3B_REQUEST = !vINT3B & INT_MSK4;         // INT3B in an expansion interrupt (undefined)  Make active low, with pullup
INT2A_REQUEST = !vINT2A & INT_MSK3;         // INT2A comed from the Video Interface, Active low signal
INT2B_REQUEST = !vINT2B & INT_MSK2;         // INT2B is an expansion interrupt (undefined)  Make active low, with pullup
INT1A_REQUEST = !vINT1A & INT_MSK1;         // INT1A comed from the Video Interface, Active low signal
   
INT1B_REQUEST.d = INT_MSK0;                  // INT1B is the power controller interrupt. Rising Edge Triggered.
INT1B_REQUEST.ck = !vINT1B;
INT1B_REQUEST.ar = !nSYS_RESET # (INT_ACK_RESET & INT1B_REQUEST_PE & field_INT_ACK_LEVEL:['d'1]);

/* 
   We will create a priority encoded version of each interrupt level so we can set the CPU_IPL0-2
   pins.  These are all active high signals, and only one will be active.  These three pin (CPU_IPL2-0), when set
   will actually call for an interrupt to occur on the CPU.  When the CPU sees this request it will do an interrupt 
   acknowlegment cycle as soon as the current cycle ends.   These are held active until either the device stops 
   asserting the request, or if edge triggered when the int ack cycle ends. 

   The CPU has an internal interrupt level mask, and will ignore request that are equal too or lower than that current level.  
   On powerup that level is set to 7, which should ignore all interrupts.  However level 7 is special in that it will ignore only
   level 6 and below.  That is why level 7 interrupts are called NMI (Non Maskable Interrupts).

   When an interrupt is being serviced the interrupt level mask is set to the level of the interrupt being serviced.  That prevents further interrupts 
   at that level from forcing reentry.
*/


INTL7_REQUEST_PE = INT7A_REQUEST;
INTL6_REQUEST_PE = (!INT7A_REQUEST) & (INT6A_REQUEST # INT6B_REQUEST );
INTL5_REQUEST_PE = (!INTL6_REQUEST_PE & !INTL7_REQUEST_PE) 
                 & (INT5A_REQUEST # INT5B_REQUEST # INT5C_REQUEST # INT5D_REQUEST );
INTL4_REQUEST_PE = (!INTL5_REQUEST_PE &!INTL6_REQUEST_PE & !INTL7_REQUEST_PE) 
                 & (INT4A_REQUEST # INT4B_REQUEST # INT4C_REQUEST );
INTL3_REQUEST_PE = (!INTL4_REQUEST_PE & !INTL5_REQUEST_PE & !INTL6_REQUEST_PE & !INTL7_REQUEST_PE) 
                 & (INT3A_REQUEST # INT3B_REQUEST );
INTL2_REQUEST_PE = (!INTL3_REQUEST_PE & !INTL4_REQUEST_PE & !INTL5_REQUEST_PE & !INTL6_REQUEST_PE & !INTL7_REQUEST_PE) 
                 & (INT2A_REQUEST # INT2B_REQUEST );
INTL1_REQUEST_PE = (!INTL2_REQUEST_PE & !INTL3_REQUEST_PE & !INTL4_REQUEST_PE & !INTL5_REQUEST_PE & !INTL6_REQUEST_PE & !INTL7_REQUEST_PE) 
                 & (INT1A_REQUEST # INT1B_REQUEST );

/* 
    We will create the CPU_IPL signals back to the CPU.
*/

CPU_IPL2 = !(INTL7_REQUEST_PE # INTL6_REQUEST_PE # INTL5_REQUEST_PE # INTL4_REQUEST_PE);
CPU_IPL1 = !(INTL7_REQUEST_PE # INTL6_REQUEST_PE # INTL3_REQUEST_PE # INTL2_REQUEST_PE);
CPU_IPL0 = !(INTL7_REQUEST_PE # INTL5_REQUEST_PE # INTL3_REQUEST_PE # INTL1_REQUEST_PE);

/* 
    Next we will create a set of priorty encoders for each level to pick the particular winning interrupt.
    In each level group only one sub interrupt will be active.
*/

INT7A_REQUEST_PE = INT7A_REQUEST;

INT6A_REQUEST_PE = INT6A_REQUEST;
INT6B_REQUEST_PE = !INT6A_REQUEST_PE & INT6B_REQUEST;

INT5A_REQUEST_PE = INT5A_REQUEST;
INT5B_REQUEST_PE = !INT5A_REQUEST_PE & INT5B_REQUEST;
INT5C_REQUEST_PE = !INT5A_REQUEST_PE & !INT5B_REQUEST_PE & INT5C_REQUEST;
INT5D_REQUEST_PE = !INT5A_REQUEST_PE & !INT5B_REQUEST_PE & !INT5C_REQUEST_PE & INT5D_REQUEST;

INT4A_REQUEST_PE = INT4A_REQUEST;
INT4B_REQUEST_PE = !INT4A_REQUEST_PE & INT4B_REQUEST;
INT4C_REQUEST_PE = !INT4A_REQUEST_PE & !INT4B_REQUEST_PE & INT4C_REQUEST;

INT3A_REQUEST_PE = INT3A_REQUEST;
INT3B_REQUEST_PE = !INT3A_REQUEST_PE & INT3B_REQUEST;

INT2A_REQUEST_PE = INT3A_REQUEST;
INT2B_REQUEST_PE = !INT2A_REQUEST_PE & INT2B_REQUEST;

INT1A_REQUEST_PE = INT1A_REQUEST;
INT1B_REQUEST_PE = !INT1A_REQUEST_PE & INT1B_REQUEST;

/* 
   With the per level priority encoder we can build the vector number that needs to be driven onto the CPU 
   data bus.

      IRQ         IRQL       Vector#              System Use
      ------      -----      --------             -------------------------------
      INT7A         7        11110000 (0xF0)      DEBUG (Button)
      INT6A         6        11100001 (0xE1)      PTC #1 (Programmable Timer)
      INT6B         6        11100010 (0xE2)      PTC #2 (Programmable Timer)
      INT5A         5        11010001 (0xD1)      NIC
      INT5B         5        11010010 (0xD2)      IDE 1
      INT5C         5        11010100 (0xD4)      IDE 2
      INT5D         5        11011000 (0xD8)      EXPANSION_I5
      INT4A         4        11000001 (0xC1)      UART 1
      INT4B         4        11000010 (0xC2)      UART 2
      INT4C         4        11000100 (0xC4)      EXPANSION_I4
      INT3A         3        10110001 (0xB1)      USB
      INT3B         3        10110010 (0xB2)      EXPANSION_I3
      INT2A         2        10100001 (0xA1)      VIDEO
      INT2B         2        10100010 (0xA2)      EXPANSION_I2
      INT1A         1        10010001 (0x91)      RTC
      INT1B         1        10010010 (0x92)      POWER CONTROLLER ( Postive Level Triggered )
     
      Note that all of the other vectors starting with 1XXXXXXX should be vectored to a spurious interrupt handler.

*/

/* DATA BUS Driver Section
    The data bus to the CPU needs to be driven for both the interrupt acknowledgement cycle as well as device 
    register reads.

    nUSB_CONFIG_REGISTER_READ goes low if a CPU READ occurs to address 0x30000203.  If that is low, we will drive
    data bus with the value for that register read.

    For the USB_CONGIF_REGISTER READ (0x30002003)
    bit 7 - USB_DATAACK from the USB controller
    bit 6 - USB RXF from the USB controller
    bit 5 - USB TXE from the USB controller


*/

  
nUSB_CONFIG_REGISTER_READ = nINTCTRL_CS # !CPU_RW # !CPU_A0 # !CPU_A1 # CPU_A2 # CPU_A3; 

[CPU_D7..0].oe = !nINT_ACK_CYCLE # !nUSB_CONFIG_REGISTER_READ;       // If we are in an Interrupt Ack Cycle or Reg Read, enable the data bus outputs.

CPU_D7 = ('b'1 & !nINT_ACK_CYCLE)
       # (nUSB_DATAACK & !nUSB_CONFIG_REGISTER_READ);

CPU_D6 = (INT_ACK_LEVEL2 & !nINT_ACK_CYCLE)
       # (nUSB_RXF & !nUSB_CONFIG_REGISTER_READ);

CPU_D5 = (INT_ACK_LEVEL1 & !nINT_ACK_CYCLE)
       # (nUSB_TXE & !nUSB_CONFIG_REGISTER_READ);

CPU_D4 = (INT_ACK_LEVEL0 & !nINT_ACK_CYCLE);

CPU_D3 = ((INTL5_REQUEST_PE & INT5D_REQUEST_PE) & !nINT_ACK_CYCLE);

CPU_D2 = (((INTL5_REQUEST_PE & INT5C_REQUEST_PE) # (INTL4_REQUEST_PE & INT4C_REQUEST_PE)) & !nINT_ACK_CYCLE);

CPU_D1 = (((INTL6_REQUEST_PE & INT6B_REQUEST_PE) # (INTL5_REQUEST_PE & INT5B_REQUEST_PE)
       # (INTL4_REQUEST_PE & INT4B_REQUEST_PE) # (INTL3_REQUEST_PE & INT3B_REQUEST_PE)
       # (INTL2_REQUEST_PE & INT2B_REQUEST_PE) # (INTL1_REQUEST_PE & INT1B_REQUEST_PE)) & !nINT_ACK_CYCLE);

CPU_D0 = (((INTL6_REQUEST_PE & INT6A_REQUEST_PE) # (INTL5_REQUEST_PE & INT5A_REQUEST_PE)
         # (INTL4_REQUEST_PE & INT4A_REQUEST_PE) # (INTL3_REQUEST_PE & INT3A_REQUEST_PE)
         # (INTL2_REQUEST_PE & INT2A_REQUEST_PE) # (INTL1_REQUEST_PE & INT1A_REQUEST_PE)) & !nINT_ACK_CYCLE);


/* 
   As a last part of the interrupt acklowdegement cycle, we need to build a single cycle signal that
   can be used to reset the flip flop of the particular edge triggered interrupt source. 

   We know the nINT_ACK_CYCLE flag will go low at the start of the acklowdegement cycle, and go high at
   the end of it.  We will use that rising edge to set flag call INT_ACK_RESET_PRE.  The flag will then go into 
   a second flip flop called INT_ACK_RESET that is clocked on the rising edge of the CPU_CLOCK.  When that second flip
   flop goes to 1 it will reset the _PRE flip flp, and on the next rising edge of the CPU_CLOCK the INT_ACK_RESET flip flop 
   will latch in a zero.  This will generate a once CPU_CLK cycle long pulse at the end of the interrupt acklowdegement cycle. 
*/



INT_ACK_RESET_PRE.d = 'b'1;
INT_ACK_RESET_PRE.ck = nINT_ACK_CYCLE;
INT_ACK_RESET_PRE.ar = !nSYS_RESET # INT_ACK_RESET;

INT_ACK_RESET.d = INT_ACK_RESET_PRE;
INT_ACK_RESET.ck = CPU_CLK;
INT_ACK_RESET.ar = !nSYS_RESET;



/*
Total dedicated input used:	4/4 	(100%)
Total I/O pins used		46/80 	(57%)
Total Logic cells used 		65/128 	(50%)
Total Flip-Flop used 		30/128 	(23%)
Total Foldback logic used 	8/128 	(6%)
Total Nodes+FB/MCells 		73/128 	(57%)
Total cascade used 		0
Total input pins 		31
Total output pins 		19
Total Pts 			182

*/


