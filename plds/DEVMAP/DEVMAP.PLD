Name	 DEVMAP;
PartNo   DEVMAP;
Date     03/30/2024;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508isptqfp100;

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};

/* 
                                                Inputs
    ##########################################################################################
*/

// From CPU
Pin[52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,75,76] = [CPU_A27..8];
Pin[100] = CPU_RW;

// From Bus Controller CPLD
Pin[1] = nDEV8BITCS;
Pin[2] = nDEV16BITCS;
Pin[5] = nDEV32BITCS;

Pin[87] = CPU_CLK;
Pin[88] = nSYS_RESET;
Pin[33] = nEXP_CACHE_CTRL;

/* 
                                                Outputs 
   ##########################################################################################
*/

Pin[29] = nEXP_DEV8BITCS;
Pin[30] = nEXP_DEV16BITCS;
Pin[31] = nEXP_DEV32BITCS;
Pin[32] = nEXP_DEV_WAIT;


Pin[6] = nDEV_WAIT;
Pin[93] = SYS_RESET_POS;  // Inverted version of reset, needed for the UART IC.
Pin[25] = nUART_CSA;
Pin[24] = nUART_CSB;
Pin[28] = nPTC_CS;
Pin[50] = nIDE1_CSA;
Pin[49] = nIDE1_CSB;
Pin[48] = nIDE2_CSA;
Pin[47] = nIDE2_CSB;
Pin[46] = nIDE_WR;
Pin[45] = nIDE_BUFFER_EN1;
Pin[44] = nIDE_BUFFER_EN2;

Pin[13] = nINTCTRL_CS;
Pin[14] = nRTC_CS;
Pin[23] = nEXP_VMEM_CS;
Pin[22] = nEXP_VIO_CS;

Pin[21] = nBOARDLEDS_CS;
Pin[27] = nVGA_CTRL_CS;
Pin[20] = nUSB_CS;
Pin[19] = nNIC_CS;

Pin[17] = RTC_A_SEL;
Pin[16] = RTC_D_SEL;
Pin[92,99] = EXPANSION_EXTRA1, EXPANSION_EXTRA2;
Pin[96] = nSEVENSEGA_WR;
Pin[97] = nSEVENSEGB_WR;
Pin[98] = nSTATUSLED_WR;



PINNODE = nIDE_WR_DELAY1, nIDE_WR_DELAY2;

// dummy expression to force the pins to be assigned.

EXPANSION_EXTRA1 = EXPANSION_EXTRA2 & nSYS_RESET & nDEV32BITCS & CPU_RW  & nEXP_DEV_WAIT & nEXP_CACHE_CTRL;

FIELD field_CPU_ADDRESS = [CPU_A27..8];

SYS_RESET_POS = !nSYS_RESET;

nDEV_WAIT = 'b'1;       // No Wait States right now for local devices.

nEXP_DEV8BITCS = nDEV8BITCS;
nEXP_DEV16BITCS = nDEV16BITCS;
nEXP_DEV32BITCS = nDEV32BITCS;



/* 8 bit devices */

nUART_CSA = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00000XX]);
nUART_CSB = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00001XX]);
nINTCTRL_CS = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00002XX]);
nRTC_CS = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00003XX]);
nPTC_CS = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00004XX]);
nEXP_VIO_CS = nDEV8BITCS # !(field_CPU_ADDRESS:['h'00005XX]);
nEXP_VMEM_CS = 'b'1;

/* 16 bit devices */

nSTATUS7SEG_CS = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00000XX]);
nBOARDLEDS_CS = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00001XX]);
nIDE1_CSA = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00004XX]);
nIDE1_CSB = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00005XX]);
nIDE2_CSA = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00006XX]);
nIDE2_CSB = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00007XX]);
nVGA_CTRL_CS = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00008XX] # field_CPU_ADDRESS:['h'00009XX]);
nUSB_CS = nDEV16BITCS # !(field_CPU_ADDRESS:['h'0000AXX] # field_CPU_ADDRESS:['h'0000BXX]);
nNIC_CS = nDEV16BITCS # !(field_CPU_ADDRESS:['h'00010XX] # field_CPU_ADDRESS:['h'00011XX]
                        # field_CPU_ADDRESS:['h'00012XX] # field_CPU_ADDRESS:['h'00013XX]);


/* IDE Device custom signals:

      nIDE_WR signal goes directly to the /WR pin on both IDE interfaces.   This signal is asserted (low) as soon as     
      the CPU_RW signal goes low, which normally happens write at the start of an /AS cycle.  The IDE_WR_DELAY1 and DELAY2 
      flip flops are configured such that they both start at 0 when an AS cycle starts.  After 2 CLK_16M cycles the 
      DELAY2 signal is set to 1, which directly unasserts the IDE /WR pin.  The allows the /WR pin to have an active rising
      edge BEFORE the end of the CPU cpu cycle.  This is critical to allow the IDE interface to latch data, since at the end
      of the cycle the output buffers to the IDE inteface are turned off.  This was a fix from the original design which 
      assumed the rising edge of the write signal would be sufficienctly ahead of the buffers getting turned off. 
      
       */

nIDE_BUFFER_EN1 = (nIDE1_CSA & nIDE1_CSB);
nIDE_BUFFER_EN2 = (nIDE2_CSA & nIDE2_CSB);

nIDE_WR = CPU_RW # nIDE_WR_DELAY2;

nIDE_WR_DELAY1.d = 'b'1;
nIDE_WR_DELAY1.ck = CPU_CLK;
nIDE_WR_DELAY1.ar = (nIDE_BUFFER_EN1 & nIDE_BUFFER_EN2)  # !nSYS_RESET;

nIDE_WR_DELAY2.d = nIDE_WR_DELAY1;
nIDE_WR_DELAY2.ck = CPU_CLK;
nIDE_WR_DELAY2.ar = (nIDE_BUFFER_EN1 & nIDE_BUFFER_EN2)  # !nSYS_RESET;

/* 
    RTC Device custom signals 

   RTC_A_SEL is used to change the address/data select lines going to the DS Real Time Clock IC.
   It is also used to drive the DS line on the RTC.  The flip flop is reset while RTS_CS is off 
   (which is tied to /AS), and then increments to 1 on the next falling edge.  It will stay at 1
   until the end of the bus cycle.
*/

RTC_A_SEL.d = 'b'1;
RTC_A_SEL.ck = !CPU_CLK;
RTC_A_SEL.ar = nRTC_CS;    /* nRTC_CS is active low, so it will be high while RTS is not being accesses */
RTC_D_SEL = !RTC_A_SEL;   /* Since RTA_A_SEL is held at zero when no access, this will be held at one which is off */



/*
Total dedicated input used:	2/4 	(50%)
Total I/O pins used		56/80 	(70%)
Total Logic cells used 		29/128 	(22%)
Total Flip-Flop used 		3/128 	(2%)
Total Foldback logic used 	0/128 	(0%)
Total Nodes+FB/MCells 		29/128 	(22%)
Total cascade used 		0
Total input pins 		32
Total output pins 		26
Total Pts 			30
*/
