Name	 VIDEOADPT;
PartNo   VIDEOADPT;
Date     03/30/2024;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508isptqfp100;

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {PREASSIGN = KEEP};

//PROPERTY ATMEL {open_collector=nEXP_DEV_WAIT};
/* NOTE:  Active low values are designated with a starting n. */

/*  
               MHz	   Horizontal (in Pixels)	                           Vertical (in Lines)
Format	Pixel Clock    Active Video   Front_Porch Sync_Pulse  Back_Porch	Active_Video	Front_Porch	Sync_Pulse Back_Porch
640x480, 60Hz	25.175	640	         16	         -96	      48	         480	         11	        -2	         31
640x480, 72Hz	31.500	640	         24	         -40	      128	         480	         9	        -3	         2

            Horizontal                              Vertical
640x480 - Blanking  (0-15)    [16]              Video out (0-479)   [480]
 TEXT     Video out (16-655) [640]              Blanking (480-490)  [11]
          Blanking  (656-671) [16]              VSYNC (491-492)     [2]
          HSYNC     (672-767) [96]              Blanking (493-524)  [31]
          Blanking  (768-799) [32]

4BPP, 16 color
            Horizontal                              Vertical
640x480 - Blanking  (0-7)      [8]              Video out (0-479)   [480]
GRAPHICS  Video out (8-647)  [640]              Blanking (480-490)  [11]
          Blanking  (648-663) [16]              VSYNC (491-492)     [2]
          HSYNC     (664-759) [96]              Blanking (493-524)  [31]
          Blanking  (760-799) [40]

*/



/* 
                                                Inputs
    ##########################################################################################
*/

Pin[89] = nSYS_RESET;
Pin[87] = DOT_CLK;
Pin = DOT_CLK2;             // Secondary DOT Clock

Pin = VRAM_SELECT_WORD0;
Pin = VRAM_SELECT_WORD1;
Pin = VRAM_LATCH;
Pin = [VID_FONTROW0..3];

// Signals from/to the Video RAM and the video latches
Pin = [VRAM_A0..A17];
Pin = [CBUS_D0..7];
Pin = [ABUS_D0..7];
Pin = [FBUS_D0..7];

// VGA output signals
Pin = VGA_RED0,VGA_RED1;
Pin = VGA_GREEN0,VGA_GREEN1;
Pin = VGA_BLUE0,VGA_BLUE1;
Pin = VGA_HSYNC;
Pin = VGA_VSYNC;


// Pins to the memory controller CPLD
Pin = VRAM_READ;
Pin = VRAM_BUSY;
Pin = GRAPHICS_MODE;  // 0 = TEXT MODE, 1 = GRAPHICS MODE

/* 
   TEXT MODE is 80x25, but 256byte of memory per row (2 bytes/char, so 160 usable bytes and the remaining unused.)

   GRAPHICS MODE is 640x480 - 4BPP IRGB (Intensity, Red, Green, Blue)  DWORD=8 pixels, so 80 DWORDS used, 128 DWORD allocated per ROW   

/* 
                                                Outputs 
   ##########################################################################################
*/

PINNODE = VGA_DISPLAY_ACTIVE;
PINNODE = VSYNC_DISPLAY_ACTIVE;
PINNODE = HSYNC_DISPLAY_ACTIVE;
PINNODE = [HSYNC_COUNTER0..9];
PINNODE = [VSYNC_COUNTER0..9];    
PINNODE = VSYNC_CLOCK_A,VSYNC_CLOCK_B;

PINNODE = VMEM_ACCESS_BUSY_START;
PINNODE = VMEM_ACCESS_BUSY_START_RESET;

PINNODE = VRAM_LATCH_DATA_IN;
PINNODE = SHIFTER_SHIFT;

PINNODE = [SREG_D0..7];     // Shift Register
PINNODE = [AREG_D0..7];     // Register to store the attribute bits for a given character.
PINNODE = [CREG_D0..7];     // Register to store the character bits for a given character, for graphics mode only


/*  ________________________________________________________________ */
/* 
    Shift Register Implementation 
    SREG_Dx are the storage registers.  D7 is the output.
    VRAM_LATCH_DATA is high to force a load into the shift register from the FBUS.
    SHIFTER_SHIFT is high to for a shift from D0->D7 by one bit, bringing in a 0.
    IF neither VRAM_LATCH_DATA or SHIFTER_SHIFT is high the SREG will load 0.  That keeps
    the SREG output at 0 unless there is active display data.
    SREG_D7 is the shifter output that goes to the VGA drivers.
  
*/

SREG_D0.d = (VRAM_LATCH_DATA_IN & FBUS_D0);
SREG_D1.d = (VRAM_LATCH_DATA_IN & FBUS_D1) # (SHIFTER_SHIFT & SREG_D0 );
SREG_D2.d = (VRAM_LATCH_DATA_IN & FBUS_D2) # (SHIFTER_SHIFT & SREG_D1 );
SREG_D3.d = (VRAM_LATCH_DATA_IN & FBUS_D3) # (SHIFTER_SHIFT & SREG_D2 );
SREG_D4.d = (VRAM_LATCH_DATA_IN & FBUS_D4) # (SHIFTER_SHIFT & SREG_D3 );
SREG_D5.d = (VRAM_LATCH_DATA_IN & FBUS_D5) # (SHIFTER_SHIFT & SREG_D4 );
SREG_D6.d = (VRAM_LATCH_DATA_IN & FBUS_D6) # (SHIFTER_SHIFT & SREG_D5 );
SREG_D7.d = (VRAM_LATCH_DATA_IN & FBUS_D7) # (SHIFTER_SHIFT & SREG_D6 );

[SREG_D0..7].ck = !DOT_CLK;
[SREG_D0..7].ar = !nSYS_RESET;

/* AREG is a register for holding the attribute byte for the current character being displayed.  It is latched at the same time
   as SREG above, and other wise hold the same value.

   The Format of the Attribute Byte is:

   bit 7        ALPHA   
   bit 6        INVERSE
   bit 5        BLUE1
   bit 4        BLUE0
   bit 3        GREEN2
   bit 2        GREEN0
   bit 1        RED1
   bit 0        RED0
   
*/

[AREG_D0..7].d = (VRAM_LATCH_DATA_IN & [ABUS_D0..7]) # (!VRAM_LATCH_DATA_IN & [AREG_D0..7]);
[AREG_D0..7].ck = !DOT_CLK;
[AREG_D0..7].ar = !nSYS_RESET;

[CREG_D0..7].d = (VRAM_LATCH_DATA_IN & [CBUS_D0..7]) # (!VRAM_LATCH_DATA_IN & [CREG_D0..7]);
[CREG_D0..7].ck = !DOT_CLK;
[CREG_D0..7].ar = !nSYS_RESET;


/* For text mode - The lower 4 bits of VSYNC provide to font row */
VID_FONTROW0 = VSYNC_COUNTER0;
VID_FONTROW1 = VSYNC_COUNTER1;
VID_FONTROW2 = VSYNC_COUNTER2;
VID_FONTROW3 = VSYNC_COUNTER3;

/* Horizontal Sync 10 bit counter, 0-799.  HSYNC_ZERO is used to reset this counter so it loops from 799 back to 0 */

HSYNC_COUNTER0.d = !HSYNC_COUNTER0 & HSYNC_ZERO;
HSYNC_COUNTER0.ck = DOT_CLK;
HSYNC_COUNTER0.ar = !nSYS_RESET;

HSYNC_COUNTER1.d = ((HSYNC_COUNTER0&!HSYNC_COUNTER1) # (!HSYNC_COUNTER0&HSYNC_COUNTER1)) & HSYNC_ZERO;
HSYNC_COUNTER1.ck = DOT_CLK;
HSYNC_COUNTER1.ar = !nSYS_RESET;

HSYNC_COUNTER2T = HSYNC_COUNTER0&HSYNC_COUNTER1;
HSYNC_COUNTER2.d = ((HSYNC_COUNTER2T&!HSYNC_COUNTER2) # (!HSYNC_COUNTER2T&HSYNC_COUNTER2)) & HSYNC_ZERO;
HSYNC_COUNTER2.ck = DOT_CLK;
HSYNC_COUNTER2.ar = !nSYS_RESET;

HSYNC_COUNTER3T = HSYNC_COUNTER2T&HSYNC_COUNTER2;
HSYNC_COUNTER3.d = ((HSYNC_COUNTER3T&!HSYNC_COUNTER3) # (!HSYNC_COUNTER3T&HSYNC_COUNTER3)) & HSYNC_ZERO;
HSYNC_COUNTER3.ck = DOT_CLK;
HSYNC_COUNTER3.ar = !nSYS_RESET;

HSYNC_COUNTER4T = HSYNC_COUNTER3T&HSYNC_COUNTER3;
HSYNC_COUNTER4.d = ((HSYNC_COUNTER4T&!HSYNC_COUNTER4) # (!HSYNC_COUNTER4T&HSYNC_COUNTER4)) & HSYNC_ZERO;
HSYNC_COUNTER4.ck = DOT_CLK;
HSYNC_COUNTER4.ar = !nSYS_RESET;

HSYNC_COUNTER5T = HSYNC_COUNTER4T&HSYNC_COUNTER4;
HSYNC_COUNTER5.d = ((HSYNC_COUNTER5T&!HSYNC_COUNTER5) # (!HSYNC_COUNTER5T&HSYNC_COUNTER5)) & HSYNC_ZERO;
HSYNC_COUNTER5.ck = DOT_CLK;
HSYNC_COUNTER5.ar = !nSYS_RESET;

HSYNC_COUNTER6T = HSYNC_COUNTER5T&HSYNC_COUNTER5;
HSYNC_COUNTER6.d = ((HSYNC_COUNTER6T&!HSYNC_COUNTER6) # (!HSYNC_COUNTER6T&HSYNC_COUNTER6)) & HSYNC_ZERO;
HSYNC_COUNTER6.ck = DOT_CLK;
HSYNC_COUNTER6.ar = !nSYS_RESET;

HSYNC_COUNTER7T = HSYNC_COUNTER6T&HSYNC_COUNTER6;
HSYNC_COUNTER7.d = ((HSYNC_COUNTER7T&!HSYNC_COUNTER7) # (!HSYNC_COUNTER7T&HSYNC_COUNTER7)) & HSYNC_ZERO;
HSYNC_COUNTER7.ck = DOT_CLK;
HSYNC_COUNTER7.ar = !nSYS_RESET;

HSYNC_COUNTER8T = HSYNC_COUNTER7T&HSYNC_COUNTER7;
HSYNC_COUNTER8.d = ((HSYNC_COUNTER8T&!HSYNC_COUNTER8) # (!HSYNC_COUNTER8T&HSYNC_COUNTER8)) & HSYNC_ZERO;
HSYNC_COUNTER8.ck = DOT_CLK;
HSYNC_COUNTER8.ar = !nSYS_RESET;

HSYNC_COUNTER9T = HSYNC_COUNTER8T&HSYNC_COUNTER8;
HSYNC_COUNTER9.d = ((HSYNC_COUNTER9T&!HSYNC_COUNTER9) # (!HSYNC_COUNTER9T&HSYNC_COUNTER9)) & HSYNC_ZERO;
HSYNC_COUNTER9.ck = DOT_CLK;
HSYNC_COUNTER9.ar = !nSYS_RESET;

FIELD hsync_counter_field = [HSYNC_COUNTER9..0];    // 0-799 counter
FIELD hsync_counter_3_field = [HSYNC_COUNTER2..0];  // 0-8 counter
FIELD hsync_counter_4_field = [HSYNC_COUNTER3..0];  // 0-15 counter

/* 
   HSYNC_ZERO is 0 when we need to loop the counter.  This is Logical AND'ed with the other inputs to each
   counters .d value, so when we are at the loop location, the next location loaded will be 0.
   HSYNC_ZERO us normally at 1, and goes to 0 for 1 clock cycle ( CLK25 low to CLK25 low ), and that
   edge is also used to increment the vertical counters via VSYNC_CLOCK.
*/

HSYNC_ZERO = !(hsync_counter_field:['d'799]);

/* 
   The VSYNC_CLOCK signal is used to increment the V_SYNC counter at the end of each horizontal sync row.   
   The reason for two FFs is to first capture the HSYNC value (on the clock edge opposite of the counter itself changing)
   followed by a second FF to sync the V_SYNC increment with the rising edge of DOT_CLK.   This allows both the H_SYNC and V_SYNC 
   counters to be used in logical operations that are clocked on the same clock signal (falling DOT_CLK)
*/


VSYNC_CLOCK_A.d = !HSYNC_ZERO;
VSYNC_CLOCK_A.ck = !DOT_CLK;
VSYNC_CLOCK_A.ar = !nSYS_RESET;

VSYNC_CLOCK_B.d = VSYNC_CLOCK_A;
VSYNC_CLOCK_B.ck = DOT_CLK;
VSYNC_CLOCK_B.ar = !nSYS_RESET;

/* Vertical Sync 9 bit counter, 0-498.  VSYNC_ZERO is used to reset this counter so it loops from 498 back to 0 */

VSYNC_COUNTER0.d = (!VSYNC_COUNTER0) & VSYNC_ZERO;
VSYNC_COUNTER0.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER0.ar = !nSYS_RESET;

VSYNC_COUNTER1.d = ((VSYNC_COUNTER0&!VSYNC_COUNTER1) # (!VSYNC_COUNTER0&VSYNC_COUNTER1)) & VSYNC_ZERO;
VSYNC_COUNTER1.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER1.ar = !nSYS_RESET;

VSYNC_COUNTER2T = VSYNC_COUNTER0&VSYNC_COUNTER1;
VSYNC_COUNTER2.d = ((VSYNC_COUNTER2T&!VSYNC_COUNTER2) # (!VSYNC_COUNTER2T&VSYNC_COUNTER2)) & VSYNC_ZERO;
VSYNC_COUNTER2.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER2.ar = !nSYS_RESET;

VSYNC_COUNTER3T = VSYNC_COUNTER2T&VSYNC_COUNTER2;
VSYNC_COUNTER3.d = ((VSYNC_COUNTER3T&!VSYNC_COUNTER3) # (!VSYNC_COUNTER3T&VSYNC_COUNTER3)) & VSYNC_ZERO;
VSYNC_COUNTER3.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER3.ar = !nSYS_RESET;

VSYNC_COUNTER4T = VSYNC_COUNTER3T&VSYNC_COUNTER3;
VSYNC_COUNTER4.d = ((VSYNC_COUNTER4T&!VSYNC_COUNTER4) # (!VSYNC_COUNTER4T&VSYNC_COUNTER4)) & VSYNC_ZERO;
VSYNC_COUNTER4.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER4.ar = !nSYS_RESET;

VSYNC_COUNTER5T = VSYNC_COUNTER4T&VSYNC_COUNTER4;
VSYNC_COUNTER5.d = ((VSYNC_COUNTER5T&!VSYNC_COUNTER5) # (!VSYNC_COUNTER5T&VSYNC_COUNTER5)) & VSYNC_ZERO;
VSYNC_COUNTER5.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER5.ar = !nSYS_RESET;

VSYNC_COUNTER6T = VSYNC_COUNTER5T&VSYNC_COUNTER5;
VSYNC_COUNTER6.d = ((VSYNC_COUNTER6T&!VSYNC_COUNTER6) # (!VSYNC_COUNTER6T&VSYNC_COUNTER6)) & VSYNC_ZERO;
VSYNC_COUNTER6.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER6.ar = !nSYS_RESET;

VSYNC_COUNTER7T = VSYNC_COUNTER6T&VSYNC_COUNTER6;
VSYNC_COUNTER7.d = ((VSYNC_COUNTER7T&!VSYNC_COUNTER7) # (!VSYNC_COUNTER7T&VSYNC_COUNTER7)) & VSYNC_ZERO;
VSYNC_COUNTER7.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER7.ar = !nSYS_RESET;

VSYNC_COUNTER8T = VSYNC_COUNTER7T&VSYNC_COUNTER7;
VSYNC_COUNTER8.d = ((VSYNC_COUNTER8T&!VSYNC_COUNTER8) # (!VSYNC_COUNTER8T&VSYNC_COUNTER8)) & VSYNC_ZERO;
VSYNC_COUNTER8.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER8.ar = !nSYS_RESET;

VSYNC_COUNTER9T = VSYNC_COUNTER8T&VSYNC_COUNTER8;
VSYNC_COUNTER9.d = ((VSYNC_COUNTER9T&!VSYNC_COUNTER9) # (!VSYNC_COUNTER9T&VSYNC_COUNTER9)) & VSYNC_ZERO;
VSYNC_COUNTER9.ck = VSYNC_CLOCK_B;
VSYNC_COUNTER9.ar = !nSYS_RESET;

FIELD vsync_counter_field = [VSYNC_COUNTER9..0];
FIELD vsync_counter_4_field = [VSYNC_COUNTER3..0];

VSYNC_ZERO = !(vsync_counter_field:['d'524]);

VSYNC_DISPLAY_ACTIVE = (vsync_counter_field:[0..'d'479]);
HSYNC_DISPLAY_ACTIVE = (!GRAPHICS_MODE) & (hsync_counter_field:[16..'d'656]);

VGA_DISPLAY_ACTIVE.d = (HSYNC_DISPLAY_ACTIVE) & (VSYNC_DISPLAY_ACTIVE);
VGA_DISPLAY_ACTIVE.ck = !DOT_CLK;
VGA_DISPLAY_ACTIVE.ar = !nSYS_RESET;

VGA_HSYNC.d = !((!GRAPHICS_MODE) & (hsync_counter_field:['d'672..'d'767]));
VGA_HSYNC.ck = !DOT_CLK;
VGA_HSYNC.ap = !nSYS_RESET;

VGA_VSYNC.d = !((!GRAPHICS_MODE) & (vsync_counter_field:['d'490..'d'491]));
VGA_VSYNC.ck = !DOT_CLK;
VGA_VSYNC.ar = !nSYS_RESET;

VRAM_BUSY.d = (hsync_counter_field:['d'0..'d'639]) & VSYNC_DISPLAY_ACTIVE;
VRAM_BUSY.ck = !DOT_CLK;
VRAM_BUSY.ar = !nSYS_RESET;

/* 
    VRAM_READ will enable the address drivers to VRAM as well as enable the VRAM to do a read.  Output from the VRAM will go to 
    a set of latches that will save all 4 bytes of video memory. 
*/
VRAM_READ.d = ( (!GRAPHICS_MODE) & ((hsync_counter_4_field:['d'8,'d'9,'d'10]) & VRAM_BUSY))
            # ( GRAPHICS_MODE & ((hsync_counter_3_field:['d'4,'d'5,'d'6]) & VRAM_BUSY));

            /*
            VRAM_READ.D = ((!GRAPHICS_MODE & !HSYNC_COUNTER2.Q & HSYNC_COUNTER3.Q & VRAM_BUSY.Q & !HSYNC_COUNTER1.Q)
	                     # (!GRAPHICS_MODE & !HSYNC_COUNTER2.Q & HSYNC_COUNTER3.Q & VRAM_BUSY.Q & !HSYNC_COUNTER0.Q));

            VRAM_READ.D = ((!GRAPHICS_MODE & !HSYNC_COUNTER2.Q & VRAM_BUSY.Q & HSYNC_COUNTER3.Q & !HSYNC_COUNTER1.Q)
	                     # (GRAPHICS_MODE & HSYNC_COUNTER2.Q & VRAM_BUSY.Q & !HSYNC_COUNTER0.Q)
	                     # (GRAPHICS_MODE & HSYNC_COUNTER2.Q & VRAM_BUSY.Q & !HSYNC_COUNTER1.Q)
	                     # (!GRAPHICS_MODE & !HSYNC_COUNTER2.Q & VRAM_BUSY.Q & !HSYNC_COUNTER0.Q & HSYNC_COUNTER3.Q));
    */

VRAM_READ.ck = !DOT_CLK;
VRAM_READ.ar = !nSYS_RESET; 

/*
    VRAM_LATCH will latch the data that is being driven from the VRAM into the 4 bytes of VRAM LATCHES.  
    This signal must happen inside the VRAM_READ signal above.
*/
VRAM_LATCH.d = ((!GRAPHICS_MODE) & ((hsync_counter_4_field:['d'10]) & VRAM_BUSY))
            #  ( GRAPHICS_MODE & ((hsync_counter_3_field:['d'6]) & VRAM_BUSY)) ;
VRAM_LATCH.ck = !DOT_CLK;
VRAM_LATCH.ar = !nSYS_RESET; 

/*  
    Once data is on the 4 byte latches, VRAM_SELECT_WORD0 will output the lower word with one byte going to both the FONT 
    ROM as well as the CBUS input while the second byte goes to the ABUS input.   Data on these inputs can be lateched
    inside the CPLD.
    In TEXT MODE: We want the WORD0 turned on cycle 13, used in cycle 0-7.
*/


VRAM_SELECT_WORD0.d = ( (!GRAPHICS_MODE) & ((hsync_counter_4_field:['d'13]) & VRAM_BUSY))
                    # ( GRAPHICS_MODE & ((hsync_counter_3_field:['d'6]) & VRAM_BUSY) );
VRAM_SELECT_WORD0.ck = !DOT_CLK;
VRAM_SELECT_WORD0.ar = !nSYS_RESET; 

/*  
    Once data is on the 4 byte latches, VRAM_SELECT_WORD1 will output the upper word with one byte going to both the FONT 
    ROM as well as the CBUS input while the second byte goes to the ABUS input.   Data on these inputs can be lateched
    inside the CPLD.
    In TEXT MODE: We want the WORD1 turned on in cycle 5, used in cycle 8-15.
*/

VRAM_SELECT_WORD1.d = ( (!GRAPHICS_MODE) & ((hsync_counter_4_field:['d'5]) & VRAM_BUSY))
                    # ( GRAPHICS_MODE & ((hsync_counter_3_field:['d'2]) & VRAM_BUSY) );
VRAM_SELECT_WORD1.ck = !DOT_CLK;
VRAM_SELECT_WORD1.ar = !nSYS_RESET; 

/*
    VRAM_LATCH_DATA_IN will force the latching of data on the FBUS and the ABUS inside the CPLD.  The latches themselves are clocked 
    on the falling edge of the DOT CLOCK, so this signal needs to be active the cycle before you want the actual latching to happen.
    In TEXT MODE: We want new pixel data to be latched starting in cycle 0 and 8 [mod 4], so this signal needs to be 1 cycle before that.
*/

VRAM_LATCH_DATA_IN.d = ( (!GRAPHICS_MODE) & ((hsync_counter_4_field:['d'15,'d'7]) & VRAM_BUSY))
                     # ( GRAPHICS_MODE & ((hsync_counter_3_field:['d'3,'d'7]) & VRAM_BUSY) );
VRAM_LATCH_DATA_IN.ck = !DOT_CLK;
VRAM_LATCH_DATA_IN.ar = !nSYS_RESET;

/*
    SHIFTER_SHIFT will trigger the shifter to do a shift operation instead of a latch operation.   The shifter latches themselves 
    are clocked on the falling edge of the DOT CLOCK, so this signal needs to be active the cycle before you want the actual 
    shifting to happen. We want new pixel data to be latched starting in cycle 0 and 8 [mod 4], so this signal needs to be 
    1 cycle before that.
*/

SHIFTER_SHIFT.d = (hsync_counter_3_field:['d'0..'d'6]) & VRAM_BUSY;
SHIFTER_SHIFT.ck = !DOT_CLK;
SHIFTER_SHIFT.ar = !nSYS_RESET;


/* SPIX selects each of the 4 different pixels */

SP0 = (hsync_counter_3_field:['d'0]);
SP1 = (hsync_counter_3_field:['d'1]);
SP2 = (hsync_counter_3_field:['d'2]);
SP3 = (hsync_counter_3_field:['d'3]);

/*
    If VRAM_READ is asserted, we want to enable to address output to the VRAM using the H and V Counters to select the 
    correct memory address

*/

[VRAM_A0..A13].oe = VRAM_READ;
VRAM_A0 = ((!GRAPHICS_MODE) & HSYNC_COUNTER4)
        # ( GRAPHICS_MODE & HSYNC_COUNTER3);
VRAM_A1 = ((!GRAPHICS_MODE) & HSYNC_COUNTER5)
        # ( GRAPHICS_MODE & HSYNC_COUNTER4);
VRAM_A2 = ((!GRAPHICS_MODE) & HSYNC_COUNTER6)
        # ( GRAPHICS_MODE & HSYNC_COUNTER5);
VRAM_A3 = ((!GRAPHICS_MODE) & HSYNC_COUNTER7)
        # ( GRAPHICS_MODE & HSYNC_COUNTER6);
VRAM_A4 = ((!GRAPHICS_MODE) & HSYNC_COUNTER8)
        # ( GRAPHICS_MODE & HSYNC_COUNTER7);
VRAM_A5 = ((!GRAPHICS_MODE) & HSYNC_COUNTER9)
        # ( GRAPHICS_MODE & HSYNC_COUNTER8);           // 6 bits - Character COLUMN * 2 (2 characters per word)
VRAM_A6 = ((!GRAPHICS_MODE) & VSYNC_COUNTER4)
        # ( GRAPHICS_MODE & HSYNC_COUNTER9);
VRAM_A7 = ((!GRAPHICS_MODE) & VSYNC_COUNTER5)
        # ( GRAPHICS_MODE & VSYNC_COUNTER0);
VRAM_A8 = ((!GRAPHICS_MODE) & VSYNC_COUNTER6)
        # ( GRAPHICS_MODE & VSYNC_COUNTER1);
VRAM_A9 = ((!GRAPHICS_MODE) & VSYNC_COUNTER7)
        # ( GRAPHICS_MODE & VSYNC_COUNTER2);
VRAM_A10 = ((!GRAPHICS_MODE) & VSYNC_COUNTER8)
         # ( GRAPHICS_MODE & VSYNC_COUNTER3);          // 5 bits - Character ROW
VRAM_A11 = ( GRAPHICS_MODE & VSYNC_COUNTER4);
VRAM_A12 = ( GRAPHICS_MODE & VSYNC_COUNTER5);
VRAM_A13 = ( GRAPHICS_MODE & VSYNC_COUNTER6);
VRAM_A14 = ( GRAPHICS_MODE & VSYNC_COUNTER7);
VRAM_A15 = ( GRAPHICS_MODE & VSYNC_COUNTER8);

// Color output of a single pixed based on D7 in the shift register.
VGA_INTENSITY = (SP0&CBUS_D7 # SP1&CBUS_D3 # SP2&ABUS_D7 # SP3&ABUS_D3);

VGA_RED0 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D0) $ AREG_D6) )
        #  ( GRAPHICS_MODE & (SP0&CBUS_D6 # SP1&CBUS_D2 # SP2&ABUS_D6 # SP3&ABUS_D2));

VGA_RED1 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D1) $ AREG_D6) )
        #  ( GRAPHICS_MODE & VGA_RED0 & VGA_INTENSITY);

VGA_GREEN0 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D2) $ AREG_D6) )
        #  ( GRAPHICS_MODE & (SP0&CBUS_D5 # SP1&CBUS_D1 # SP2&ABUS_D5 # SP3&ABUS_D1));

VGA_GREEN1 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D3) $ AREG_D6) )
        #  ( GRAPHICS_MODE & VGA_GREEN0 & VGA_INTENSITY);

VGA_BLUE0 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D4) $ AREG_D6) )
        #  ( GRAPHICS_MODE & (SP0&CBUS_D4 # SP1&CBUS_D0 # SP2&ABUS_D4 # SP3&ABUS_D0));

VGA_BLUE1 = ( (!GRAPHICS_MODE) & ((SREG_D7 & AREG_D5) $ AREG_D6) )
        #  ( GRAPHICS_MODE & VGA_BLUE0 & VGA_INTENSITY);



/*
Total dedicated input used:	2/4 	(50%)
Total I/O pins used		60/80 	(75%)
Total Logic cells used 		101/128 	(78%)
Total Flip-Flop used 		56/128 	(43%)
Total Foldback logic used 	0/128 	(0%)
Total Nodes+FB/MCells 		101/128 	(78%)
Total cascade used 		0
Total input pins 		31
Total output pins 		31
Total Pts 			333
*/


